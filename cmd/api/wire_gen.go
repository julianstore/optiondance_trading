// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"option-dance/handler/api"
	market2 "option-dance/service/market"
	order2 "option-dance/service/order"
	position2 "option-dance/service/position"
	"option-dance/service/statistics"
	transfer2 "option-dance/service/transfer"
	user2 "option-dance/service/user"
	waitlist2 "option-dance/service/waitlist"
	"option-dance/store/action"
	"option-dance/store/dbmarket"
	"option-dance/store/deliveryprice"
	"option-dance/store/market"
	"option-dance/store/order"
	"option-dance/store/position"
	"option-dance/store/property"
	"option-dance/store/trade"
	"option-dance/store/transfer"
	"option-dance/store/user"
	"option-dance/store/waitlist"
)

// Injectors from wire.go:

func InitApiServer() (api.ServerApi, error) {
	db := ProvideDb()
	userStore := user.New(db)
	userService := user2.New(userStore)
	waitListStore := waitlist.New(db)
	waitListService := waitlist2.New(waitListStore)
	marketStore := market.New(db)
	dbMarketStore := dbmarket.NewDbMarketStore(db)
	marketService := market2.New(marketStore, dbMarketStore)
	positionStore := position.New(db)
	tradeStore := trade.New(db)
	statisticsService := statistics.New(positionStore, tradeStore)
	orderStore := order.New(db)
	actionStore := action.New(db)
	orderService := order2.New(orderStore, tradeStore, actionStore)
	transferStore := transfer.New(db)
	transferService := transfer2.New(transferStore)
	deliveryPriceStore := deliveryprice.New(db)
	positionService := position2.New(positionStore, tradeStore, transferService, userStore, deliveryPriceStore)
	propertyStore := property.New(db)
	dbMarketTrackerStore := dbmarket.NewDbMarketTrackerStore(db)
	dbMarketService := market2.NewDbMarketService(dbMarketTrackerStore, dbMarketStore, propertyStore)
	serverApi := api.NewServer(userService, waitListService, marketService, statisticsService, orderService, positionService, positionStore, deliveryPriceStore, propertyStore, dbMarketService)
	return serverApi, nil
}
