// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"option-dance/match"
	market2 "option-dance/service/market"
	message2 "option-dance/service/message"
	order2 "option-dance/service/order"
	position2 "option-dance/service/position"
	trade2 "option-dance/service/trade"
	transfer2 "option-dance/service/transfer"
	"option-dance/store/action"
	"option-dance/store/dbmarket"
	"option-dance/store/deliveryprice"
	"option-dance/store/market"
	"option-dance/store/message"
	"option-dance/store/order"
	"option-dance/store/position"
	"option-dance/store/property"
	"option-dance/store/rawtx"
	"option-dance/store/trade"
	"option-dance/store/transfer"
	"option-dance/store/user"
	"option-dance/store/utxo"
)

// Injectors from wire.go:

func InitExchange() (*match.Exchange, error) {
	db := ProvideDb()
	propertyStore := property.New(db)
	marketStore := market.New(db)
	dbMarketStore := dbmarket.NewDbMarketStore(db)
	marketService := market2.New(marketStore, dbMarketStore)
	messageStore := message.New(db)
	client := ProvideMixinClient()
	positionStore := position.New(db)
	messageService := message2.New(client, messageStore, positionStore)
	messageBuilder := message2.NewMessageBuilder()
	orderStore := order.New(db)
	tradeStore := trade.New(db)
	actionStore := action.New(db)
	orderService := order2.New(orderStore, tradeStore, actionStore)
	transferStore := transfer.New(db)
	utxoStore := utxo.New(db)
	rawTxStore := rawtx.New(db)
	transferService := transfer2.New(transferStore)
	userStore := user.New(db)
	deliveryPriceStore := deliveryprice.New(db)
	positionService := position2.New(positionStore, tradeStore, transferService, userStore, deliveryPriceStore)
	notifier := provideNotifier(messageStore, positionStore, messageBuilder)
	utxoDispatcher := match.NewUtxoDispatcher(propertyStore, positionStore, orderStore, orderService, utxoStore, positionService, transferService, notifier, deliveryPriceStore)
	utxoSyncer := match.NewUtxoSyncer(propertyStore, utxoStore)
	spentSyncer := match.NewSpentSyncer(propertyStore, positionStore, utxoStore, transferStore, notifier)
	multiSigner := match.NewMultiSigner(notifier, utxoStore, rawTxStore, transferStore)
	tradeService := trade2.NewTradeService(notifier, positionService, orderStore)
	exchange := match.NewExchange(propertyStore, marketService, messageStore, messageService, messageBuilder, orderService, transferStore, utxoStore, rawTxStore, utxoDispatcher, utxoSyncer, spentSyncer, multiSigner, tradeService, notifier)
	return exchange, nil
}
